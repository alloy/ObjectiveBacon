#line 1 "Source/UIBaconPath.m.rl"
#import "UIBaconPath.h"
#import "UIBacon.h"


#define FILTER(from, length) do { \
  char filter[length+1]; \
  sprintf(filter, "%.*s", length, from); \
  current = [NSString stringWithUTF8String:filter]; \
} while (0)

#define FILTER_TRIMMED() FILTER(ts+1, p-ts-2)
#define AUTO_FILTER() FILTER(ts, p-ts)

enum {
  STRING,
  VARIABLE,
  BOOLEAN
};

#line 21 "Source/UIBaconPath.m.rl"

#line 24 "Source/UIBaconPath.m"
static const char _query_path_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	4, 1, 5, 1, 6, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 2, 2, 5, 
	2, 4, 3, 2, 8, 2, 2, 8, 
	5, 2, 13, 6, 2, 14, 6, 3, 
	8, 2, 5
};

static const short _query_path_key_offsets[] = {
	0, 0, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 16, 19, 
	24, 28, 32, 36, 40, 44, 48, 52, 
	56, 60, 64, 68, 77, 83, 92, 99, 
	107, 113, 117, 128, 140, 153, 158, 161, 
	167, 171, 175, 179, 183, 187, 191, 195, 
	199, 203, 207, 211, 220, 226, 235, 242, 
	250, 256, 260, 271, 283, 296, 302, 308, 
	320, 331, 343, 356, 362, 365, 371, 375, 
	379, 383, 387, 391, 395, 399, 403, 407, 
	411, 415, 424, 430, 439, 446, 454, 460, 
	464, 475, 487, 500, 506, 512, 521, 528, 
	536, 541, 552, 564, 577, 589, 601, 607, 
	615, 626, 640, 646, 658, 664, 673, 680, 
	688, 693, 701, 712, 726, 738, 744, 755, 
	767, 780, 785, 797, 803, 812, 819, 827, 
	835, 846, 860, 864, 867, 871, 873, 876, 
	879, 880, 884, 889, 896, 898, 901, 905, 
	911, 915, 919, 923, 927, 931, 935, 939, 
	943, 947, 951, 955, 964, 970, 979, 986, 
	994, 1000, 1004, 1015, 1027, 1040, 1044, 1056, 
	1067, 1079, 1092, 1096, 1099, 1103, 1109, 1113, 
	1117, 1121, 1125, 1129, 1133, 1137, 1141, 1145, 
	1149, 1153, 1162, 1168, 1177, 1184, 1192, 1198, 
	1202, 1213, 1225, 1238, 1242, 1254, 1260, 1271, 
	1283, 1296, 1308, 1316, 1327, 1341, 1350, 1357, 
	1365, 1370, 1374, 1386, 1392, 1401, 1408, 1416, 
	1421, 1429, 1440, 1454, 1459, 1462, 1466, 1471, 
	1478, 1480, 1485, 1488, 1492, 1494, 1497, 1499, 
	1502, 1506, 1513, 1513, 1516, 1519, 1522, 1525
};

static const char _query_path_trans_keys[] = {
	37, 39, 47, 95, 80, 65, 84, 72, 
	95, 69, 78, 68, 95, 37, 32, 126, 
	39, 32, 126, 37, 39, 47, 32, 126, 
	39, 95, 32, 126, 39, 80, 32, 126, 
	39, 65, 32, 126, 39, 84, 32, 126, 
	39, 72, 32, 126, 39, 95, 32, 126, 
	39, 69, 32, 126, 39, 78, 32, 126, 
	39, 68, 32, 126, 39, 95, 32, 126, 
	37, 39, 32, 126, 39, 42, 47, 32, 
	64, 65, 90, 91, 126, 37, 39, 47, 
	91, 32, 126, 39, 45, 64, 32, 47, 
	48, 57, 58, 126, 39, 32, 47, 48, 
	57, 58, 126, 39, 93, 32, 47, 48, 
	57, 58, 126, 37, 39, 47, 91, 32, 
	126, 39, 64, 32, 126, 39, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	39, 61, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 39, 102, 116, 32, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 37, 39, 47, 32, 126, 39, 32, 
	126, 37, 39, 47, 93, 32, 126, 39, 
	95, 32, 126, 39, 80, 32, 126, 39, 
	65, 32, 126, 39, 84, 32, 126, 39, 
	72, 32, 126, 39, 95, 32, 126, 39, 
	69, 32, 126, 39, 78, 32, 126, 39, 
	68, 32, 126, 39, 95, 32, 126, 37, 
	39, 32, 126, 39, 42, 47, 32, 64, 
	65, 90, 91, 126, 37, 39, 47, 91, 
	32, 126, 39, 45, 64, 32, 47, 48, 
	57, 58, 126, 39, 32, 47, 48, 57, 
	58, 126, 39, 93, 32, 47, 48, 57, 
	58, 126, 37, 39, 47, 91, 32, 126, 
	39, 64, 32, 126, 39, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	61, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 102, 116, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	37, 39, 47, 93, 32, 126, 37, 39, 
	47, 91, 32, 126, 39, 93, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	39, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 61, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	102, 116, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 37, 39, 47, 93, 
	32, 126, 39, 32, 126, 37, 39, 47, 
	93, 32, 126, 39, 95, 32, 126, 39, 
	80, 32, 126, 39, 65, 32, 126, 39, 
	84, 32, 126, 39, 72, 32, 126, 39, 
	95, 32, 126, 39, 69, 32, 126, 39, 
	78, 32, 126, 39, 68, 32, 126, 39, 
	95, 32, 126, 37, 39, 32, 126, 39, 
	42, 47, 32, 64, 65, 90, 91, 126, 
	37, 39, 47, 91, 32, 126, 39, 45, 
	64, 32, 47, 48, 57, 58, 126, 39, 
	32, 47, 48, 57, 58, 126, 39, 93, 
	32, 47, 48, 57, 58, 126, 37, 39, 
	47, 91, 32, 126, 39, 64, 32, 126, 
	39, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 61, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	102, 116, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 37, 39, 47, 93, 
	32, 126, 37, 39, 47, 91, 32, 126, 
	39, 45, 64, 32, 47, 48, 57, 58, 
	126, 39, 32, 47, 48, 57, 58, 126, 
	39, 93, 32, 47, 48, 57, 58, 126, 
	37, 39, 47, 32, 126, 39, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	39, 61, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 39, 102, 116, 32, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 39, 93, 32, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 39, 93, 32, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 37, 39, 47, 91, 32, 126, 39, 
	42, 32, 64, 65, 90, 91, 126, 39, 
	32, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 37, 39, 47, 91, 32, 64, 
	65, 90, 92, 96, 97, 122, 123, 126, 
	37, 39, 47, 93, 32, 126, 39, 93, 
	32, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 37, 39, 47, 91, 32, 126, 
	39, 45, 64, 32, 47, 48, 57, 58, 
	126, 39, 32, 47, 48, 57, 58, 126, 
	39, 93, 32, 47, 48, 57, 58, 126, 
	37, 39, 47, 32, 126, 39, 42, 32, 
	64, 65, 90, 91, 126, 39, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	37, 39, 47, 91, 32, 64, 65, 90, 
	92, 96, 97, 122, 123, 126, 39, 93, 
	32, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 37, 39, 47, 91, 32, 126, 
	39, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 61, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	102, 116, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 37, 39, 47, 32, 
	126, 39, 93, 32, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 37, 39, 47, 
	91, 32, 126, 39, 45, 64, 32, 47, 
	48, 57, 58, 126, 39, 32, 47, 48, 
	57, 58, 126, 39, 93, 32, 47, 48, 
	57, 58, 126, 39, 42, 32, 64, 65, 
	90, 91, 126, 39, 32, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 37, 39, 
	47, 91, 32, 64, 65, 90, 92, 96, 
	97, 122, 123, 126, 42, 47, 65, 90, 
	37, 47, 91, 45, 64, 48, 57, 48, 
	57, 93, 48, 57, 37, 47, 91, 64, 
	65, 90, 97, 122, 61, 65, 90, 97, 
	122, 39, 102, 116, 65, 90, 97, 122, 
	32, 126, 39, 32, 126, 39, 93, 32, 
	126, 37, 39, 47, 91, 32, 126, 39, 
	95, 32, 126, 39, 80, 32, 126, 39, 
	65, 32, 126, 39, 84, 32, 126, 39, 
	72, 32, 126, 39, 95, 32, 126, 39, 
	69, 32, 126, 39, 78, 32, 126, 39, 
	68, 32, 126, 39, 95, 32, 126, 37, 
	39, 32, 126, 39, 42, 47, 32, 64, 
	65, 90, 91, 126, 37, 39, 47, 91, 
	32, 126, 39, 45, 64, 32, 47, 48, 
	57, 58, 126, 39, 32, 47, 48, 57, 
	58, 126, 39, 93, 32, 47, 48, 57, 
	58, 126, 37, 39, 47, 91, 32, 126, 
	39, 64, 32, 126, 39, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	61, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 102, 116, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	39, 93, 32, 126, 39, 93, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	39, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 61, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	102, 116, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 39, 93, 32, 126, 
	39, 32, 126, 39, 93, 32, 126, 37, 
	39, 47, 91, 32, 126, 39, 95, 32, 
	126, 39, 80, 32, 126, 39, 65, 32, 
	126, 39, 84, 32, 126, 39, 72, 32, 
	126, 39, 95, 32, 126, 39, 69, 32, 
	126, 39, 78, 32, 126, 39, 68, 32, 
	126, 39, 95, 32, 126, 37, 39, 32, 
	126, 39, 42, 47, 32, 64, 65, 90, 
	91, 126, 37, 39, 47, 91, 32, 126, 
	39, 45, 64, 32, 47, 48, 57, 58, 
	126, 39, 32, 47, 48, 57, 58, 126, 
	39, 93, 32, 47, 48, 57, 58, 126, 
	37, 39, 47, 91, 32, 126, 39, 64, 
	32, 126, 39, 32, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 39, 61, 32, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 39, 102, 116, 32, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 39, 93, 
	32, 126, 39, 93, 32, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 37, 39, 
	47, 91, 32, 126, 39, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 39, 
	61, 32, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 39, 102, 116, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	39, 93, 32, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 39, 42, 32, 64, 
	65, 90, 91, 126, 39, 32, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 37, 
	39, 47, 91, 32, 64, 65, 90, 92, 
	96, 97, 122, 123, 126, 39, 45, 64, 
	32, 47, 48, 57, 58, 126, 39, 32, 
	47, 48, 57, 58, 126, 39, 93, 32, 
	47, 48, 57, 58, 126, 37, 39, 47, 
	32, 126, 39, 93, 32, 126, 39, 93, 
	32, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 37, 39, 47, 91, 32, 126, 
	39, 45, 64, 32, 47, 48, 57, 58, 
	126, 39, 32, 47, 48, 57, 58, 126, 
	39, 93, 32, 47, 48, 57, 58, 126, 
	37, 39, 47, 32, 126, 39, 42, 32, 
	64, 65, 90, 91, 126, 39, 32, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	37, 39, 47, 91, 32, 64, 65, 90, 
	92, 96, 97, 122, 123, 126, 93, 65, 
	90, 97, 122, 37, 47, 91, 65, 90, 
	97, 122, 61, 65, 90, 97, 122, 39, 
	102, 116, 65, 90, 97, 122, 32, 126, 
	93, 65, 90, 97, 122, 37, 47, 91, 
	45, 64, 48, 57, 48, 57, 93, 48, 
	57, 37, 47, 42, 65, 90, 65, 90, 
	97, 122, 37, 47, 91, 65, 90, 97, 
	122, 39, 32, 126, 39, 32, 126, 39, 
	32, 126, 39, 32, 126, 39, 32, 126, 
	0
};

static const char _query_path_single_lengths[] = {
	0, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 4, 3, 1, 2, 
	4, 2, 1, 2, 3, 3, 1, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 4, 3, 1, 2, 
	4, 2, 1, 2, 3, 4, 4, 2, 
	1, 2, 3, 4, 1, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 4, 3, 1, 2, 4, 2, 
	1, 2, 3, 4, 4, 3, 1, 2, 
	3, 1, 2, 3, 2, 2, 4, 2, 
	1, 4, 4, 2, 4, 3, 1, 2, 
	3, 2, 1, 4, 2, 4, 1, 2, 
	3, 3, 2, 4, 3, 1, 2, 2, 
	1, 4, 2, 3, 2, 0, 1, 3, 
	1, 0, 1, 3, 0, 1, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 4, 3, 1, 2, 
	4, 2, 1, 2, 3, 2, 2, 1, 
	2, 3, 2, 1, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 4, 3, 1, 2, 4, 2, 
	1, 2, 3, 2, 2, 4, 1, 2, 
	3, 2, 2, 1, 4, 3, 1, 2, 
	3, 2, 2, 4, 3, 1, 2, 3, 
	2, 1, 4, 1, 3, 0, 1, 3, 
	0, 1, 3, 2, 0, 1, 2, 1, 
	0, 3, 0, 1, 1, 1, 1, 1
};

static const char _query_path_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 3, 3, 3, 
	1, 1, 5, 5, 5, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 3, 3, 3, 
	1, 1, 5, 5, 5, 1, 1, 5, 
	5, 5, 5, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 1, 3, 3, 3, 1, 1, 
	5, 5, 5, 1, 1, 3, 3, 3, 
	1, 5, 5, 5, 5, 5, 1, 3, 
	5, 5, 1, 5, 1, 3, 3, 3, 
	1, 3, 5, 5, 5, 1, 5, 5, 
	5, 1, 5, 1, 3, 3, 3, 3, 
	5, 5, 1, 0, 1, 1, 1, 0, 
	0, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 3, 3, 3, 
	1, 1, 5, 5, 5, 1, 5, 5, 
	5, 5, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 1, 3, 3, 3, 1, 1, 
	5, 5, 5, 1, 5, 1, 5, 5, 
	5, 5, 3, 5, 5, 3, 3, 3, 
	1, 1, 5, 1, 3, 3, 3, 1, 
	3, 5, 5, 2, 0, 2, 2, 2, 
	1, 2, 0, 1, 1, 1, 0, 1, 
	2, 2, 0, 1, 1, 1, 1, 1
};

static const short _query_path_index_offsets[] = {
	0, 0, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 22, 24, 26, 28, 31, 
	36, 40, 44, 48, 52, 56, 60, 64, 
	68, 72, 76, 80, 87, 93, 100, 105, 
	111, 117, 121, 128, 136, 145, 150, 153, 
	159, 163, 167, 171, 175, 179, 183, 187, 
	191, 195, 199, 203, 210, 216, 223, 228, 
	234, 240, 244, 251, 259, 268, 274, 280, 
	288, 295, 303, 312, 318, 321, 327, 331, 
	335, 339, 343, 347, 351, 355, 359, 363, 
	367, 371, 378, 384, 391, 396, 402, 408, 
	412, 419, 427, 436, 442, 448, 455, 460, 
	466, 471, 478, 486, 495, 503, 511, 517, 
	523, 530, 540, 546, 554, 560, 567, 572, 
	578, 583, 589, 596, 606, 614, 620, 627, 
	635, 644, 649, 657, 663, 670, 675, 681, 
	687, 694, 704, 708, 712, 716, 718, 721, 
	725, 727, 730, 734, 740, 742, 745, 749, 
	755, 759, 763, 767, 771, 775, 779, 783, 
	787, 791, 795, 799, 806, 812, 819, 824, 
	830, 836, 840, 847, 855, 864, 868, 876, 
	883, 891, 900, 904, 907, 911, 917, 921, 
	925, 929, 933, 937, 941, 945, 949, 953, 
	957, 961, 968, 974, 981, 986, 992, 998, 
	1002, 1009, 1017, 1026, 1030, 1038, 1044, 1051, 
	1059, 1068, 1076, 1082, 1089, 1099, 1106, 1111, 
	1117, 1122, 1126, 1134, 1140, 1147, 1152, 1158, 
	1163, 1169, 1176, 1186, 1190, 1194, 1197, 1201, 
	1207, 1209, 1213, 1217, 1221, 1223, 1226, 1229, 
	1232, 1235, 1241, 1242, 1245, 1248, 1251, 1254
};

static const unsigned char _query_path_trans_targs_wi[] = {
	2, 13, 130, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 11, 0, 12, 0, 
	234, 0, 14, 0, 15, 14, 0, 16, 
	15, 27, 14, 0, 15, 17, 14, 0, 
	15, 18, 14, 0, 15, 19, 14, 0, 
	15, 20, 14, 0, 15, 21, 14, 0, 
	15, 22, 14, 0, 15, 23, 14, 0, 
	15, 24, 14, 0, 15, 25, 14, 0, 
	15, 26, 14, 0, 235, 15, 14, 0, 
	15, 28, 127, 14, 128, 14, 0, 16, 
	15, 27, 29, 14, 0, 15, 30, 118, 
	14, 31, 14, 0, 15, 14, 31, 14, 
	0, 15, 32, 14, 31, 14, 0, 16, 
	15, 27, 33, 14, 0, 15, 34, 14, 
	0, 15, 14, 35, 14, 35, 14, 0, 
	15, 36, 14, 35, 14, 35, 14, 0, 
	37, 116, 116, 14, 116, 14, 116, 14, 
	0, 40, 112, 51, 38, 0, 39, 38, 
	0, 40, 39, 51, 62, 38, 0, 39, 
	41, 38, 0, 39, 42, 38, 0, 39, 
	43, 38, 0, 39, 44, 38, 0, 39, 
	45, 38, 0, 39, 46, 38, 0, 39, 
	47, 38, 0, 39, 48, 38, 0, 39, 
	49, 38, 0, 39, 50, 38, 0, 236, 
	39, 38, 0, 39, 52, 113, 38, 114, 
	38, 0, 40, 39, 51, 53, 38, 0, 
	39, 54, 64, 38, 55, 38, 0, 39, 
	38, 55, 38, 0, 39, 56, 38, 55, 
	38, 0, 40, 39, 51, 57, 38, 0, 
	39, 58, 38, 0, 39, 38, 59, 38, 
	59, 38, 0, 39, 60, 38, 59, 38, 
	59, 38, 0, 61, 63, 63, 38, 63, 
	38, 63, 38, 0, 40, 39, 51, 62, 
	38, 0, 40, 39, 51, 57, 38, 0, 
	39, 62, 38, 63, 38, 63, 38, 0, 
	39, 38, 65, 38, 65, 38, 0, 39, 
	66, 38, 65, 38, 65, 38, 0, 67, 
	107, 107, 38, 107, 38, 107, 38, 0, 
	70, 106, 81, 102, 68, 0, 69, 68, 
	0, 70, 69, 81, 92, 68, 0, 69, 
	71, 68, 0, 69, 72, 68, 0, 69, 
	73, 68, 0, 69, 74, 68, 0, 69, 
	75, 68, 0, 69, 76, 68, 0, 69, 
	77, 68, 0, 69, 78, 68, 0, 69, 
	79, 68, 0, 69, 80, 68, 0, 237, 
	69, 68, 0, 69, 82, 103, 68, 104, 
	68, 0, 70, 69, 81, 83, 68, 0, 
	69, 84, 97, 68, 85, 68, 0, 69, 
	68, 85, 68, 0, 69, 86, 68, 85, 
	68, 0, 70, 69, 81, 87, 68, 0, 
	69, 88, 68, 0, 69, 68, 89, 68, 
	89, 68, 0, 69, 90, 68, 89, 68, 
	89, 68, 0, 91, 101, 101, 68, 101, 
	68, 101, 68, 0, 70, 69, 81, 92, 
	68, 0, 70, 69, 81, 93, 68, 0, 
	69, 94, 97, 68, 95, 68, 0, 69, 
	68, 95, 68, 0, 69, 96, 68, 95, 
	68, 0, 70, 69, 81, 68, 0, 69, 
	68, 98, 68, 98, 68, 0, 69, 99, 
	68, 98, 68, 98, 68, 0, 91, 100, 
	100, 68, 100, 68, 100, 68, 0, 69, 
	92, 68, 100, 68, 100, 68, 0, 69, 
	102, 68, 101, 68, 101, 68, 0, 70, 
	69, 81, 87, 68, 0, 69, 82, 68, 
	104, 68, 0, 69, 68, 105, 68, 105, 
	68, 0, 70, 69, 81, 83, 68, 105, 
	68, 105, 68, 0, 70, 69, 81, 102, 
	68, 0, 39, 108, 38, 107, 38, 107, 
	38, 0, 40, 39, 51, 109, 38, 0, 
	39, 110, 64, 38, 111, 38, 0, 39, 
	38, 111, 38, 0, 39, 112, 38, 111, 
	38, 0, 40, 39, 51, 38, 0, 39, 
	52, 38, 114, 38, 0, 39, 38, 115, 
	38, 115, 38, 0, 40, 39, 51, 53, 
	38, 115, 38, 115, 38, 0, 15, 117, 
	14, 116, 14, 116, 14, 0, 16, 15, 
	27, 33, 14, 0, 15, 14, 119, 14, 
	119, 14, 0, 15, 120, 14, 119, 14, 
	119, 14, 0, 121, 122, 122, 14, 122, 
	14, 122, 14, 0, 70, 96, 81, 68, 
	0, 15, 123, 14, 122, 14, 122, 14, 
	0, 16, 15, 27, 124, 14, 0, 15, 
	125, 118, 14, 126, 14, 0, 15, 14, 
	126, 14, 0, 15, 15, 14, 126, 14, 
	0, 15, 28, 14, 128, 14, 0, 15, 
	14, 129, 14, 129, 14, 0, 16, 15, 
	27, 29, 14, 129, 14, 129, 14, 0, 
	131, 231, 232, 0, 2, 130, 132, 0, 
	133, 221, 134, 0, 134, 0, 135, 134, 
	0, 2, 130, 136, 0, 137, 0, 138, 
	138, 0, 139, 138, 138, 0, 140, 219, 
	219, 219, 219, 0, 141, 0, 142, 141, 
	0, 142, 143, 141, 0, 144, 142, 155, 
	161, 141, 0, 142, 145, 141, 0, 142, 
	146, 141, 0, 142, 147, 141, 0, 142, 
	148, 141, 0, 142, 149, 141, 0, 142, 
	150, 141, 0, 142, 151, 141, 0, 142, 
	152, 141, 0, 142, 153, 141, 0, 142, 
	154, 141, 0, 238, 142, 141, 0, 142, 
	156, 216, 141, 217, 141, 0, 144, 142, 
	155, 157, 141, 0, 142, 158, 167, 141, 
	159, 141, 0, 142, 141, 159, 141, 0, 
	142, 160, 141, 159, 141, 0, 144, 142, 
	155, 161, 141, 0, 142, 162, 141, 0, 
	142, 141, 163, 141, 163, 141, 0, 142, 
	164, 141, 163, 141, 163, 141, 0, 165, 
	166, 166, 141, 166, 141, 166, 141, 0, 
	142, 143, 141, 0, 142, 143, 141, 166, 
	141, 166, 141, 0, 142, 141, 168, 141, 
	168, 141, 0, 142, 169, 141, 168, 141, 
	168, 141, 0, 170, 210, 210, 141, 210, 
	141, 210, 141, 0, 209, 197, 171, 0, 
	172, 171, 0, 172, 173, 171, 0, 174, 
	172, 185, 205, 171, 0, 172, 175, 171, 
	0, 172, 176, 171, 0, 172, 177, 171, 
	0, 172, 178, 171, 0, 172, 179, 171, 
	0, 172, 180, 171, 0, 172, 181, 171, 
	0, 172, 182, 171, 0, 172, 183, 171, 
	0, 172, 184, 171, 0, 239, 172, 171, 
	0, 172, 186, 202, 171, 203, 171, 0, 
	174, 172, 185, 187, 171, 0, 172, 188, 
	198, 171, 189, 171, 0, 172, 171, 189, 
	171, 0, 172, 190, 171, 189, 171, 0, 
	174, 172, 185, 191, 171, 0, 172, 192, 
	171, 0, 172, 171, 193, 171, 193, 171, 
	0, 172, 194, 171, 193, 171, 193, 171, 
	0, 195, 196, 196, 171, 196, 171, 196, 
	171, 0, 172, 173, 171, 0, 172, 197, 
	171, 196, 171, 196, 171, 0, 174, 172, 
	185, 191, 171, 0, 172, 171, 199, 171, 
	199, 171, 0, 172, 200, 171, 199, 171, 
	199, 171, 0, 195, 201, 201, 171, 201, 
	171, 201, 171, 0, 172, 173, 171, 201, 
	171, 201, 171, 0, 172, 186, 171, 203, 
	171, 0, 172, 171, 204, 171, 204, 171, 
	0, 174, 172, 185, 187, 171, 204, 171, 
	204, 171, 0, 172, 206, 198, 171, 207, 
	171, 0, 172, 171, 207, 171, 0, 172, 
	208, 171, 207, 171, 0, 174, 172, 185, 
	171, 0, 172, 197, 171, 0, 142, 211, 
	141, 210, 141, 210, 141, 0, 144, 142, 
	155, 212, 141, 0, 142, 213, 167, 141, 
	214, 141, 0, 142, 141, 214, 141, 0, 
	142, 215, 141, 214, 141, 0, 144, 142, 
	155, 141, 0, 142, 156, 141, 217, 141, 
	0, 142, 141, 218, 141, 218, 141, 0, 
	144, 142, 155, 157, 141, 218, 141, 218, 
	141, 0, 220, 219, 219, 0, 2, 130, 
	136, 0, 222, 222, 0, 223, 222, 222, 
	0, 224, 225, 225, 225, 225, 0, 171, 
	0, 226, 225, 225, 0, 2, 130, 227, 
	0, 228, 221, 229, 0, 229, 0, 230, 
	229, 0, 2, 130, 0, 131, 232, 0, 
	233, 233, 0, 2, 130, 132, 233, 233, 
	0, 0, 15, 14, 0, 39, 38, 0, 
	69, 68, 0, 142, 141, 0, 172, 171, 
	0, 0
};

static const char _query_path_trans_actions_wi[] = {
	0, 0, 0, 13, 0, 13, 0, 13, 
	0, 13, 0, 13, 0, 13, 0, 13, 
	0, 13, 0, 13, 0, 13, 0, 13, 
	0, 13, 11, 13, 15, 0, 13, 0, 
	15, 0, 0, 13, 15, 0, 0, 13, 
	15, 0, 0, 13, 15, 0, 0, 13, 
	15, 0, 0, 13, 15, 0, 0, 13, 
	15, 0, 0, 13, 15, 0, 0, 13, 
	15, 0, 0, 13, 15, 0, 0, 13, 
	15, 0, 0, 13, 0, 15, 0, 13, 
	15, 25, 0, 0, 41, 0, 13, 23, 
	15, 23, 23, 0, 13, 15, 11, 0, 
	0, 11, 0, 13, 15, 0, 0, 0, 
	13, 15, 19, 0, 0, 0, 13, 0, 
	15, 0, 0, 0, 13, 15, 0, 0, 
	13, 15, 0, 1, 0, 1, 0, 13, 
	15, 3, 0, 0, 0, 0, 0, 13, 
	15, 32, 32, 0, 7, 0, 7, 0, 
	13, 5, 35, 5, 5, 13, 38, 0, 
	13, 0, 38, 0, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 0, 
	38, 0, 13, 38, 25, 0, 0, 41, 
	0, 13, 23, 38, 23, 23, 0, 13, 
	38, 11, 0, 0, 11, 0, 13, 38, 
	0, 0, 0, 13, 38, 19, 0, 0, 
	0, 13, 0, 38, 0, 0, 0, 13, 
	38, 0, 0, 13, 38, 0, 1, 0, 
	1, 0, 13, 38, 3, 0, 0, 0, 
	0, 0, 13, 38, 32, 32, 0, 7, 
	0, 7, 0, 13, 5, 47, 5, 5, 
	5, 13, 21, 38, 21, 21, 0, 13, 
	38, 9, 0, 0, 0, 0, 0, 13, 
	38, 0, 1, 0, 1, 0, 13, 38, 
	3, 0, 0, 0, 0, 0, 13, 38, 
	32, 32, 0, 7, 0, 7, 0, 13, 
	5, 47, 5, 5, 5, 13, 38, 0, 
	13, 0, 38, 0, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 38, 
	0, 0, 13, 38, 0, 0, 13, 0, 
	38, 0, 13, 38, 25, 0, 0, 41, 
	0, 13, 23, 38, 23, 23, 0, 13, 
	38, 11, 0, 0, 11, 0, 13, 38, 
	0, 0, 0, 13, 38, 19, 0, 0, 
	0, 13, 0, 38, 0, 0, 0, 13, 
	38, 0, 0, 13, 38, 0, 1, 0, 
	1, 0, 13, 38, 3, 0, 0, 0, 
	0, 0, 13, 38, 32, 32, 0, 7, 
	0, 7, 0, 13, 5, 47, 5, 5, 
	5, 13, 21, 38, 21, 21, 0, 13, 
	38, 11, 0, 0, 11, 0, 13, 38, 
	0, 0, 0, 13, 38, 19, 0, 0, 
	0, 13, 0, 38, 0, 0, 13, 38, 
	0, 1, 0, 1, 0, 13, 38, 3, 
	0, 0, 0, 0, 0, 13, 38, 32, 
	32, 0, 7, 0, 7, 0, 13, 38, 
	9, 0, 0, 0, 0, 0, 13, 38, 
	9, 0, 0, 0, 0, 0, 13, 21, 
	38, 21, 21, 0, 13, 38, 27, 0, 
	44, 0, 13, 38, 0, 0, 0, 0, 
	0, 13, 17, 38, 17, 17, 0, 0, 
	0, 0, 0, 13, 0, 38, 0, 0, 
	0, 13, 38, 9, 0, 0, 0, 0, 
	0, 13, 21, 38, 21, 21, 0, 13, 
	38, 11, 0, 0, 11, 0, 13, 38, 
	0, 0, 0, 13, 38, 19, 0, 0, 
	0, 13, 0, 38, 0, 0, 13, 38, 
	27, 0, 44, 0, 13, 38, 0, 0, 
	0, 0, 0, 13, 17, 38, 17, 17, 
	0, 0, 0, 0, 0, 13, 15, 9, 
	0, 0, 0, 0, 0, 13, 21, 15, 
	21, 21, 0, 13, 15, 0, 1, 0, 
	1, 0, 13, 15, 3, 0, 0, 0, 
	0, 0, 13, 15, 32, 32, 0, 7, 
	0, 7, 0, 13, 5, 35, 5, 5, 
	13, 15, 9, 0, 0, 0, 0, 0, 
	13, 21, 15, 21, 21, 0, 13, 15, 
	11, 0, 0, 11, 0, 13, 15, 0, 
	0, 0, 13, 15, 19, 0, 0, 0, 
	13, 15, 27, 0, 44, 0, 13, 15, 
	0, 0, 0, 0, 0, 13, 17, 15, 
	17, 17, 0, 0, 0, 0, 0, 13, 
	25, 0, 41, 13, 23, 23, 23, 13, 
	11, 0, 11, 13, 0, 13, 19, 0, 
	13, 0, 0, 0, 13, 0, 13, 1, 
	1, 13, 3, 0, 0, 13, 0, 32, 
	32, 7, 7, 13, 5, 13, 9, 0, 
	13, 9, 0, 0, 13, 21, 9, 21, 
	21, 0, 13, 9, 0, 0, 13, 9, 
	0, 0, 13, 9, 0, 0, 13, 9, 
	0, 0, 13, 9, 0, 0, 13, 9, 
	0, 0, 13, 9, 0, 0, 13, 9, 
	0, 0, 13, 9, 0, 0, 13, 9, 
	0, 0, 13, 0, 9, 0, 13, 9, 
	25, 0, 0, 41, 0, 13, 23, 9, 
	23, 23, 0, 13, 9, 11, 0, 0, 
	11, 0, 13, 9, 0, 0, 0, 13, 
	9, 19, 0, 0, 0, 13, 0, 9, 
	0, 0, 0, 13, 9, 0, 0, 13, 
	9, 0, 1, 0, 1, 0, 13, 9, 
	3, 0, 0, 0, 0, 0, 13, 9, 
	32, 32, 0, 7, 0, 7, 0, 13, 
	29, 5, 5, 13, 9, 9, 0, 0, 
	0, 0, 0, 13, 9, 0, 1, 0, 
	1, 0, 13, 9, 3, 0, 0, 0, 
	0, 0, 13, 9, 32, 32, 0, 7, 
	0, 7, 0, 13, 29, 5, 5, 13, 
	9, 0, 13, 9, 0, 0, 13, 21, 
	9, 21, 21, 0, 13, 9, 0, 0, 
	13, 9, 0, 0, 13, 9, 0, 0, 
	13, 9, 0, 0, 13, 9, 0, 0, 
	13, 9, 0, 0, 13, 9, 0, 0, 
	13, 9, 0, 0, 13, 9, 0, 0, 
	13, 9, 0, 0, 13, 0, 9, 0, 
	13, 9, 25, 0, 0, 41, 0, 13, 
	23, 9, 23, 23, 0, 13, 9, 11, 
	0, 0, 11, 0, 13, 9, 0, 0, 
	0, 13, 9, 19, 0, 0, 0, 13, 
	0, 9, 0, 0, 0, 13, 9, 0, 
	0, 13, 9, 0, 1, 0, 1, 0, 
	13, 9, 3, 0, 0, 0, 0, 0, 
	13, 9, 32, 32, 0, 7, 0, 7, 
	0, 13, 29, 5, 5, 13, 9, 9, 
	0, 0, 0, 0, 0, 13, 21, 9, 
	21, 21, 0, 13, 9, 0, 1, 0, 
	1, 0, 13, 9, 3, 0, 0, 0, 
	0, 0, 13, 9, 32, 32, 0, 7, 
	0, 7, 0, 13, 9, 9, 0, 0, 
	0, 0, 0, 13, 9, 27, 0, 44, 
	0, 13, 9, 0, 0, 0, 0, 0, 
	13, 17, 9, 17, 17, 0, 0, 0, 
	0, 0, 13, 9, 11, 0, 0, 11, 
	0, 13, 9, 0, 0, 0, 13, 9, 
	19, 0, 0, 0, 13, 0, 9, 0, 
	0, 13, 9, 0, 0, 13, 9, 9, 
	0, 0, 0, 0, 0, 13, 21, 9, 
	21, 21, 0, 13, 9, 11, 0, 0, 
	11, 0, 13, 9, 0, 0, 0, 13, 
	9, 19, 0, 0, 0, 13, 0, 9, 
	0, 0, 13, 9, 27, 0, 44, 0, 
	13, 9, 0, 0, 0, 0, 0, 13, 
	17, 9, 17, 17, 0, 0, 0, 0, 
	0, 13, 9, 0, 0, 13, 21, 21, 
	21, 13, 1, 1, 13, 3, 0, 0, 
	13, 0, 32, 32, 7, 7, 13, 5, 
	13, 9, 0, 0, 13, 21, 21, 21, 
	13, 11, 0, 11, 13, 0, 13, 19, 
	0, 13, 0, 0, 13, 27, 44, 13, 
	0, 0, 13, 17, 17, 17, 0, 0, 
	13, 0, 15, 0, 0, 38, 0, 0, 
	38, 0, 0, 9, 0, 0, 9, 0, 
	0, 0
};

static const char _query_path_eof_actions[] = {
	0, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 0, 0, 0, 0, 0, 0
};

static const int query_path_start = 1;
static const int query_path_first_final = 234;
static const int query_path_error = 0;

static const int query_path_en_main = 1;

#line 22 "Source/UIBaconPath.m.rl"


@implementation UIBaconPath

+ (id)viewsByPath:(NSString *)path ofView:(UIView *)view {
  id result = view;

  NSString *_path = [path stringByAppendingString:@"%_PATH_END_%"];

  int cs = 0;
  char *ts = 0;
  char *pe = 0;
  char *p = (char *)[_path UTF8String];
  char *eof = p + (char)[_path length];

  char *start = p;

  // property name & value start/end
  char *pns = 0;
  char *pne = 0;
  char *pvs = 0;
  char *pve = 0;
  int type = STRING;

  BOOL traverse = NO;
  NSString *current;

  UIView *v;

  
#line 754 "Source/UIBaconPath.m"
	{
	cs = query_path_start;
	}

#line 759 "Source/UIBaconPath.m"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _query_path_trans_keys + _query_path_key_offsets[cs];
	_trans = _query_path_index_offsets[cs];

	_klen = _query_path_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _query_path_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _query_path_trans_targs_wi[_trans];

	if ( _query_path_trans_actions_wi[_trans] == 0 )
		goto _again;

	_acts = _query_path_actions + _query_path_trans_actions_wi[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 52 "Source/UIBaconPath.m.rl"
	{ pns = p; }
	break;
	case 1:
#line 53 "Source/UIBaconPath.m.rl"
	{ pne = p; }
	break;
	case 2:
#line 56 "Source/UIBaconPath.m.rl"
	{ type = STRING; pvs = p; }
	break;
	case 3:
#line 59 "Source/UIBaconPath.m.rl"
	{ type = BOOLEAN; pvs = p; }
	break;
	case 4:
#line 62 "Source/UIBaconPath.m.rl"
	{ type = VARIABLE; pvs = p; }
	break;
	case 5:
#line 65 "Source/UIBaconPath.m.rl"
	{ pve = p; }
	break;
	case 6:
#line 68 "Source/UIBaconPath.m.rl"
	{
      ts = p;
    }
	break;
	case 7:
#line 72 "Source/UIBaconPath.m.rl"
	{
      NSLog(@"Parse error occurred in: %@", path);
      return nil;
    }
	break;
	case 8:
#line 77 "Source/UIBaconPath.m.rl"
	{
      AUTO_FILTER();
      result = [view viewByName:current];
      // TODO
      //NSLog(@"raise if an element name is not at the start of the path!");
    }
	break;
	case 9:
#line 84 "Source/UIBaconPath.m.rl"
	{
      AUTO_FILTER();
      if ([result isKindOfClass:[UIView class]]) {
        result = [result _viewsByClass:NSClassFromString(current) recursive:traverse];
      } else {
        NSMutableArray *r = [NSMutableArray array];
        for (v in [(UIBaconViewSet *)result array]) {
          [r addObjectsFromArray:[v _viewsByClass:NSClassFromString(current) recursive:traverse]];
        }
        result = r;
      }
      if ([result count] == 0) {
        return nil;
      }
      result = [[[UIBaconViewSet alloc] initWithArray:result] autorelease];
    }
	break;
	case 10:
#line 101 "Source/UIBaconPath.m.rl"
	{
      AUTO_FILTER();
      result = [result index:[current integerValue]];
    }
	break;
	case 11:
#line 117 "Source/UIBaconPath.m.rl"
	{
      FILTER(pns, pne-pns);
      NSString *name = current;
      FILTER(pvs, pve-pvs);
      id value = current;

      if (type == BOOLEAN) {
        value = [NSNumber numberWithBool:[value isEqualToString:@"true"]];
      } else if (type == VARIABLE) {
        value = [self evalVariable:value];
      }

      if ([result isKindOfClass:[UIView class]]) {
        // only match the current view if it matches this property
        NSString *actualValue = [result valueForKey:name];
        if (![value isEqual:actualValue]) {
          return nil;
        }
      } else {
        // return all views in the current view set that match this property
        NSMutableArray *r = [NSMutableArray array];
        NSArray *views = [(UIBaconViewSet *)result array];
        for (v in views) {
          NSString *actualValue = [v valueForKey:name];
          if ([value isEqual:actualValue]) {
            [r addObject:v];
          }
        }
        result = [[[UIBaconViewSet alloc] initWithArray:r] autorelease];
      }
    }
	break;
	case 12:
#line 149 "Source/UIBaconPath.m.rl"
	{
      NSArray *r;
      if ([result isKindOfClass:[UIView class]]) {
        r = [self _collectSubviews:[NSArray arrayWithObject:result] recursive:traverse];
      } else {
        r = [self _collectSubviews:[(UIBaconViewSet *)result array] recursive:traverse];
      }
      result = [[[UIBaconViewSet alloc] initWithArray:r] autorelease];
    }
	break;
	case 13:
#line 159 "Source/UIBaconPath.m.rl"
	{
      traverse = NO;
    }
	break;
	case 14:
#line 163 "Source/UIBaconPath.m.rl"
	{
      traverse = YES;
    }
	break;
#line 962 "Source/UIBaconPath.m"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _query_path_actions + _query_path_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 7:
#line 72 "Source/UIBaconPath.m.rl"
	{
      NSLog(@"Parse error occurred in: %@", path);
      return nil;
    }
	break;
#line 985 "Source/UIBaconPath.m"
		}
	}
	}

	_out: {}
	}
#line 192 "Source/UIBaconPath.m.rl"


  /*if (cs == query_path_error) {*/
    /*NSLog(@"There was an error!");*/
  /*}*/

  return result;
}

+ (id)evalVariable:(NSString *)variable {
  // TODO
  NSLog(@"raise exception that +[UIBaconPath evalVariable:] should be implemented by the client!");
  return nil;
}

+ (NSArray *)_collectSubviews:(NSArray *)views recursive:(BOOL)recursive {
  NSMutableArray *result = [NSMutableArray array];
  for (UIView *v in views) {
    NSArray *subviews = [v subviews];
    [result addObjectsFromArray:subviews];
    if (recursive) {
      [result addObjectsFromArray:[self _collectSubviews:subviews recursive:YES]];
    }
  }
  return result;
}

@end
